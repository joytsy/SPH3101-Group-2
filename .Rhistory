#
# # Manually implement all models evaluated in backward stepwise regression and obtain AIC values
# mod1 <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___3+data$a1_q28___4+data$a1_q28___7+
#              data$a1_q28___5+data$a1_q28___8+factor(data$a1_type_tb)+factor(data$a1_prov))
# summary(mod1)
# anova(mod1)
# AIC(mod1) # AIC = 4790.106
#
# mod2 <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___3+data$a1_q28___4+data$a1_q28___7+
#              data$a1_q28___5+data$a1_q28___8+factor(data$a1_prov)) # Removed TB Type
# summary(mod2)
# anova(mod2)
# AIC(mod2) # AIC = 4788.19
#
# mod3 <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___3+data$a1_q28___4+data$a1_q28___7+
#              data$a1_q28___8+factor(data$a1_prov)) # Removed Fever (5)
# summary(mod3)
# anova(mod3)
# AIC(mod3) # AIC = 4787.288
#
# mod4 <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___3+data$a1_q28___4+data$a1_q28___7+
#              factor(data$a1_prov)) # Removed Night Sweat (8)
# summary(mod4)
# anova(mod4)
# AIC(mod4) # AIC = 4789.363
#
# mod5 <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___3+data$a1_q28___7+
#              factor(data$a1_prov)) # Removed Dyspnea (4)
# summary(mod5)
# anova(mod5)
# AIC(mod5) # AIC = 4789.317
#
# mod6 <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___7+
#              data$a1_prov) # Removed Headache (3)
# summary(mod6)
# anova(mod6)
# AIC(mod6) # AIC = 4807.565
#
# mod7 <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___7+
#              data$a1_operat_dist) # Removed Province
# anova(mod7)
#
# AIC(mod7) # AIC - 4760.458
# -------- Final Confirmed Logistic Regression of Stigma Levels against Significant Variables  --------
## Use stigma_thresNumber outcome variable for logistic regression models.
## For each model, remove variable with largest p-value and check for drop in deviance until the model no longer improve and
## remaining variables are significant.
## After removing variables with p-value > 0.05, we are left with cough, weight loss, fever, night sweat
# and operational district as significant variables for whether one experiences high or low stigma.
m1 <- glm(data$stigma_thresNumber~data$a1_q28___1+data$a1_q28___3+data$a1_q28___4+data$a1_q28___7+
data$a1_q28___5+data$a1_q28___8+factor(data$a1_type_tb)+factor(data$a1_prov), family='binomial')
logRegMod_back <- step(m1, direction="backward")
library(car)
summary(logRegMod_back)
# Perform Wald test
Anova(logRegMod_back, test = "Wald")
# Implement backward stepwise regression using step() to obtain best fit of model based on data
linearRegMod <- lm(data$stigma_score~data$a1_q28___1+data$a1_q28___3+data$a1_q28___4+data$a1_q28___7+
data$a1_q28___5+data$a1_q28___8+factor(data$a1_type_tb)+factor(data$a1_prov))
linearRegMod_back <- step(linearRegMod, direction = "backward", scope = formula(~ .))
summary(linearRegMod_back)
confint(linearRegMod_back)
anova(linearRegMod_back)
getwd()
# run 'stigmaEDA.R' script
source('stigmaEDA.R')
# run 'stigmaEDA.R' script
source('archive/stigmaEDA.R')
source('load_data.r')
source('MyFunctions.R')
# run 'stigmaEDA.R' script
source('archive/stigmaEDA.R')
source('load_data.r')
source('MyFunctions.R')
# run 'stigmaEDA.R' script
source('archive/stigmaEDA.R')
# run 'stigmaEDA.R' script
source('archive/stigmaEDA.R')
library(grid)
COLS = c('lightpink','steelblue')	# changed color codes
scoresComparisonData = list(datatb1$stigma_score[!is.na(datatb2$stigma_score)],
datatb2$stigma_score[!is.na(datatb2$stigma_score)])
# Summary Statistics for both time frames
summary(datatb1$stigma_score[!is.na(datatb2$stigma_score)]) # mean=15.37, median=16
summary(datatb2$stigma_score[!is.na(datatb2$stigma_score)]) # mean=13.21, median=14
BOXPLOT_DATA = list()
VIOLIN_DATA = list()
for(i in 1:length(scoresComparisonData))
{
BOXPLOT_DATA[[i]] = list()
BOXPLOT_DATA[[i]]$min = min((scoresComparisonData[[i]]),na.rm = TRUE)
# BOXPLOT_DATA[[i]]$min[BOXPLOT_DATA[[i]]$min < -1] = -1 # not applicable since scores are > 0
BOXPLOT_DATA[[i]]$q1 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.25,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q2 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.5,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q3 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.75,na.rm = TRUE))
BOXPLOT_DATA[[i]]$max = max((scoresComparisonData[[i]]),na.rm = TRUE)
}
for(i in 1:length(scoresComparisonData))
{
VIOLIN_DATA[[i]] = list()
dens = density(scoresComparisonData[[i]])
VIOLIN_DATA[[i]]$x = pmax(dens$x, 0) # ensure density does not fall below 0
VIOLIN_DATA[[i]]$y = pmax(dens$y, 0) # ensure density does not fall below 0
}
# save in folder
# png(filename = 'stigmaScoresComparisonPlot.png',width = 20,height = 12,units = 'cm',res = 700) # save in plots folder
if(1)
{
YRANGE = c(0,38)
XRANGE = c(0,38)
scale = c(40,40)
grid.newpage()
pushViewport(plotViewport(c(4,4,1.5,1.5),xscale=c(XRANGE),yscale=c(YRANGE)))
grid.rect()
grid.yaxis(gp=gpar(fontsize=10))
grid.xaxis(gp=gpar(fontsize=10))
grid.text('Stigma Scores of Follow Up Cohort at Baseline and Follow-Up', y=unit(1, 'npc')+unit(0.7, 'lines'), gp=gpar(fontsize=15,fontface = 'bold'))
grid.text('Follow-Up',x=unit(-2.8,'lines'),rot=90,gp=gpar(fontsize=14,fontface = 'bold'))
grid.text('Baseline',y=unit(-2.4,'lines'),rot=0,gp=gpar(fontsize=14,fontface = 'bold'))
XAXISPOS <- c(1:4)  # Positions of the boxplots on the x-axis
grid.lines(x= XRANGE,y = YRANGE,default.units = 'native',
gp = gpar(lty='dotted'))
# separate into baseline<followup, baseline==followup and baseline>followup for plotting points
for (i in 1:length(scoresComparisonData[[1]])) {
color <- ifelse(scoresComparisonData[[1]][i] < scoresComparisonData[[2]][i], 'steelblue',
ifelse(scoresComparisonData[[1]][i] > scoresComparisonData[[2]][i], 'indianred', 'gray'))
grid.points(x = scoresComparisonData[[1]][i],
y = scoresComparisonData[[2]][i],
default.units = 'native',
pch = 16,
gp = gpar(col = color, alpha = 0.4, cex = 0.5))
}
for (i in 1:length(scoresComparisonData))
{
if(i==1)
{
grid.polygon(y = unit(c(VIOLIN_DATA[[i]]$y)*scale[i],'native')+unit(0,'native'),
x = unit(VIOLIN_DATA[[i]]$x,'native'),
gp = gpar(col = NA, fill = COLS[i],alpha = 0.2))
grid.polygon(x = c(BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q3, BOXPLOT_DATA[[i]]$q3),
y = c(0, 2, 2, 0),
default.units = 'native',
gp = gpar(col = NA, fill = 'white', alpha=0.8))
grid.lines(x = c(BOXPLOT_DATA[[i]]$q2, BOXPLOT_DATA[[i]]$q2),
y = c(0, 2),
default.units = 'native',
gp = gpar(col =COLS[i], lwd = 2,alpha = 0.2))
}
if(i==2)
{
grid.polygon(x = unit(c(VIOLIN_DATA[[i]]$y)*scale[i],'native')+unit(0,'native'),
y = unit(VIOLIN_DATA[[i]]$x,'native'),
gp = gpar(col = NA, fill = COLS[i],alpha = 0.2))
grid.polygon(y = c(BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q3, BOXPLOT_DATA[[i]]$q3),
x = c(0, 1, 1, 0),
default.units = 'native',
gp = gpar(col = NA, fill = 'white', alpha=0.8))
grid.lines(y = c(BOXPLOT_DATA[[i]]$q2, BOXPLOT_DATA[[i]]$q2),
x = c(0, 1),
default.units = 'native',
gp = gpar(col =COLS[i], lwd = 2,alpha = 0.2))
}
}
popViewport()
}
# dev.off()
source('load_data.r')
source('MyFunctions.R')
library(grid)
COLS = c('lightpink','steelblue')	# changed color codes
scoresComparisonData = list(datatb1$stigma_score[!is.na(datatb2$stigma_score)],
datatb2$stigma_score[!is.na(datatb2$stigma_score)])
# Summary Statistics for both time frames
summary(datatb1$stigma_score[!is.na(datatb2$stigma_score)]) # mean=15.37, median=16
summary(datatb2$stigma_score[!is.na(datatb2$stigma_score)]) # mean=13.21, median=14
BOXPLOT_DATA = list()
VIOLIN_DATA = list()
for(i in 1:length(scoresComparisonData))
{
BOXPLOT_DATA[[i]] = list()
BOXPLOT_DATA[[i]]$min = min((scoresComparisonData[[i]]),na.rm = TRUE)
# BOXPLOT_DATA[[i]]$min[BOXPLOT_DATA[[i]]$min < -1] = -1 # not applicable since scores are > 0
BOXPLOT_DATA[[i]]$q1 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.25,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q2 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.5,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q3 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.75,na.rm = TRUE))
BOXPLOT_DATA[[i]]$max = max((scoresComparisonData[[i]]),na.rm = TRUE)
}
for(i in 1:length(scoresComparisonData))
{
VIOLIN_DATA[[i]] = list()
dens = density(scoresComparisonData[[i]])
VIOLIN_DATA[[i]]$x = pmax(dens$x, 0) # ensure density does not fall below 0
VIOLIN_DATA[[i]]$y = pmax(dens$y, 0) # ensure density does not fall below 0
}
# Load Datasets, Run data-processing function
source('load_data.r')
source('MyFunctions.R')
library(grid)
datatb1 <- process_datatb1_function(datatb1)
datatb2 <- process_datatb2_function(datatb2)
COLS = c('lightpink','steelblue')	# changed color codes
scoresComparisonData = list(datatb1$stigma_score[!is.na(datatb2$stigma_score)],
datatb2$stigma_score[!is.na(datatb2$stigma_score)])
# Summary Statistics for both time frames
summary(datatb1$stigma_score[!is.na(datatb2$stigma_score)]) # mean=15.37, median=16
summary(datatb2$stigma_score[!is.na(datatb2$stigma_score)]) # mean=13.21, median=14
BOXPLOT_DATA = list()
VIOLIN_DATA = list()
for(i in 1:length(scoresComparisonData))
{
BOXPLOT_DATA[[i]] = list()
BOXPLOT_DATA[[i]]$min = min((scoresComparisonData[[i]]),na.rm = TRUE)
# BOXPLOT_DATA[[i]]$min[BOXPLOT_DATA[[i]]$min < -1] = -1 # not applicable since scores are > 0
BOXPLOT_DATA[[i]]$q1 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.25,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q2 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.5,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q3 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.75,na.rm = TRUE))
BOXPLOT_DATA[[i]]$max = max((scoresComparisonData[[i]]),na.rm = TRUE)
}
for(i in 1:length(scoresComparisonData))
{
VIOLIN_DATA[[i]] = list()
dens = density(scoresComparisonData[[i]])
VIOLIN_DATA[[i]]$x = pmax(dens$x, 0) # ensure density does not fall below 0
VIOLIN_DATA[[i]]$y = pmax(dens$y, 0) # ensure density does not fall below 0
}
# save in folder
# png(filename = 'stigmaScoresComparisonPlot.png',width = 20,height = 12,units = 'cm',res = 700) # save in plots folder
if(1)
{
YRANGE = c(0,38)
XRANGE = c(0,38)
scale = c(40,40)
grid.newpage()
pushViewport(plotViewport(c(4,4,1.5,1.5),xscale=c(XRANGE),yscale=c(YRANGE)))
grid.rect()
grid.yaxis(gp=gpar(fontsize=10))
grid.xaxis(gp=gpar(fontsize=10))
grid.text('Stigma Scores of Follow Up Cohort at Baseline and Follow-Up', y=unit(1, 'npc')+unit(0.7, 'lines'), gp=gpar(fontsize=15,fontface = 'bold'))
grid.text('Follow-Up',x=unit(-2.8,'lines'),rot=90,gp=gpar(fontsize=14,fontface = 'bold'))
grid.text('Baseline',y=unit(-2.4,'lines'),rot=0,gp=gpar(fontsize=14,fontface = 'bold'))
XAXISPOS <- c(1:4)  # Positions of the boxplots on the x-axis
grid.lines(x= XRANGE,y = YRANGE,default.units = 'native',
gp = gpar(lty='dotted'))
# separate into baseline<followup, baseline==followup and baseline>followup for plotting points
for (i in 1:length(scoresComparisonData[[1]])) {
color <- ifelse(scoresComparisonData[[1]][i] < scoresComparisonData[[2]][i], 'steelblue',
ifelse(scoresComparisonData[[1]][i] > scoresComparisonData[[2]][i], 'indianred', 'gray'))
grid.points(x = scoresComparisonData[[1]][i],
y = scoresComparisonData[[2]][i],
default.units = 'native',
pch = 16,
gp = gpar(col = color, alpha = 0.4, cex = 0.5))
}
for (i in 1:length(scoresComparisonData))
{
if(i==1)
{
grid.polygon(y = unit(c(VIOLIN_DATA[[i]]$y)*scale[i],'native')+unit(0,'native'),
x = unit(VIOLIN_DATA[[i]]$x,'native'),
gp = gpar(col = NA, fill = COLS[i],alpha = 0.2))
grid.polygon(x = c(BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q3, BOXPLOT_DATA[[i]]$q3),
y = c(0, 2, 2, 0),
default.units = 'native',
gp = gpar(col = NA, fill = 'white', alpha=0.8))
grid.lines(x = c(BOXPLOT_DATA[[i]]$q2, BOXPLOT_DATA[[i]]$q2),
y = c(0, 2),
default.units = 'native',
gp = gpar(col =COLS[i], lwd = 2,alpha = 0.2))
}
if(i==2)
{
grid.polygon(x = unit(c(VIOLIN_DATA[[i]]$y)*scale[i],'native')+unit(0,'native'),
y = unit(VIOLIN_DATA[[i]]$x,'native'),
gp = gpar(col = NA, fill = COLS[i],alpha = 0.2))
grid.polygon(y = c(BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q3, BOXPLOT_DATA[[i]]$q3),
x = c(0, 1, 1, 0),
default.units = 'native',
gp = gpar(col = NA, fill = 'white', alpha=0.8))
grid.lines(y = c(BOXPLOT_DATA[[i]]$q2, BOXPLOT_DATA[[i]]$q2),
x = c(0, 1),
default.units = 'native',
gp = gpar(col =COLS[i], lwd = 2,alpha = 0.2))
}
}
popViewport()
}
# dev.off()
COLS = c('lightpink','steelblue')	# changed color codes
scoresComparisonData = list(datatb1$stigma_score[!is.na(datatb2$stigma_score)],
datatb2$stigma_score[!is.na(datatb2$stigma_score)])
# Summary Statistics for both time frames
summary(datatb1$stigma_score[!is.na(datatb2$stigma_score)]) # mean=15.37, median=16
summary(datatb2$stigma_score[!is.na(datatb2$stigma_score)]) # mean=13.21, median=14
BOXPLOT_DATA = list()
VIOLIN_DATA = list()
for(i in 1:length(scoresComparisonData))
{
BOXPLOT_DATA[[i]] = list()
BOXPLOT_DATA[[i]]$min = min((scoresComparisonData[[i]]),na.rm = TRUE)
# BOXPLOT_DATA[[i]]$min[BOXPLOT_DATA[[i]]$min < -1] = -1 # not applicable since scores are > 0
BOXPLOT_DATA[[i]]$q1 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.25,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q2 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.5,na.rm = TRUE))
BOXPLOT_DATA[[i]]$q3 = as.numeric(quantile((scoresComparisonData[[i]]),probs = 0.75,na.rm = TRUE))
BOXPLOT_DATA[[i]]$max = max((scoresComparisonData[[i]]),na.rm = TRUE)
}
for(i in 1:length(scoresComparisonData))
{
VIOLIN_DATA[[i]] = list()
dens = density(scoresComparisonData[[i]])
VIOLIN_DATA[[i]]$x = pmax(dens$x, 0) # ensure density does not fall below 0
VIOLIN_DATA[[i]]$y = pmax(dens$y, 0) # ensure density does not fall below 0
}
# save in folder
# png(filename = 'stigmaScoresComparisonPlot.png',width = 20,height = 12,units = 'cm',res = 700) # save in plots folder
if(1)
{
YRANGE = c(0,38)
XRANGE = c(0,38)
scale = c(40,40)
grid.newpage()
pushViewport(plotViewport(c(4,4,1.5,1.5),xscale=c(XRANGE),yscale=c(YRANGE)))
grid.rect()
grid.yaxis(gp=gpar(fontsize=10))
grid.xaxis(gp=gpar(fontsize=10))
grid.text('Stigma Scores of Follow Up Cohort at Baseline and Follow-Up', y=unit(1, 'npc')+unit(0.7, 'lines'), gp=gpar(fontsize=15,fontface = 'bold'))
grid.text('Follow-Up',x=unit(-2.8,'lines'),rot=90,gp=gpar(fontsize=14,fontface = 'bold'))
grid.text('Baseline',y=unit(-2.4,'lines'),rot=0,gp=gpar(fontsize=14,fontface = 'bold'))
XAXISPOS <- c(1:4)  # Positions of the boxplots on the x-axis
grid.lines(x= XRANGE,y = YRANGE,default.units = 'native',
gp = gpar(lty='dotted'))
# separate into baseline<followup, baseline==followup and baseline>followup for plotting points
for (i in 1:length(scoresComparisonData[[1]])) {
color <- ifelse(scoresComparisonData[[1]][i] < scoresComparisonData[[2]][i], 'steelblue',
ifelse(scoresComparisonData[[1]][i] > scoresComparisonData[[2]][i], 'indianred', 'gray'))
grid.points(x = scoresComparisonData[[1]][i],
y = scoresComparisonData[[2]][i],
default.units = 'native',
pch = 16,
gp = gpar(col = color, alpha = 0.4, cex = 0.5))
}
for (i in 1:length(scoresComparisonData))
{
if(i==1)
{
grid.polygon(y = unit(c(VIOLIN_DATA[[i]]$y)*scale[i],'native')+unit(0,'native'),
x = unit(VIOLIN_DATA[[i]]$x,'native'),
gp = gpar(col = NA, fill = COLS[i],alpha = 0.2))
grid.polygon(x = c(BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q3, BOXPLOT_DATA[[i]]$q3),
y = c(0, 2, 2, 0),
default.units = 'native',
gp = gpar(col = NA, fill = 'white', alpha=0.8))
grid.lines(x = c(BOXPLOT_DATA[[i]]$q2, BOXPLOT_DATA[[i]]$q2),
y = c(0, 2),
default.units = 'native',
gp = gpar(col =COLS[i], lwd = 2,alpha = 0.2))
}
if(i==2)
{
grid.polygon(x = unit(c(VIOLIN_DATA[[i]]$y)*scale[i],'native')+unit(0,'native'),
y = unit(VIOLIN_DATA[[i]]$x,'native'),
gp = gpar(col = NA, fill = COLS[i],alpha = 0.2))
grid.polygon(y = c(BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q1, BOXPLOT_DATA[[i]]$q3, BOXPLOT_DATA[[i]]$q3),
x = c(0, 1, 1, 0),
default.units = 'native',
gp = gpar(col = NA, fill = 'white', alpha=0.8))
grid.lines(y = c(BOXPLOT_DATA[[i]]$q2, BOXPLOT_DATA[[i]]$q2),
x = c(0, 1),
default.units = 'native',
gp = gpar(col =COLS[i], lwd = 2,alpha = 0.2))
}
}
popViewport()
}
# dev.off()
# load relevant libraries and date files
source('load_data.R')
# load data manipulation and processing functions and remove outliers
source('MyFunctions.R')
# load pre-processing functions and filtered datasets for subgroup analysis
source('preprocessBeforeSubgroup.R')
# load pre-processing functions and filtered datasets for subgroup analysis
source('processBeforeSubgroup.R')
# Conduct EDA/Bivariate analysis
source('edaContinuousVariables.R')
source('edaSociodemoVariables.R')
source('edaSymptomsVariables.R')
source('edaMedicalConditionsVariables.R')
# Run Linear and Logistic Regression
source('baselineHypoTestAndRegModels.R')
# Analysis of Stigma Scores Over Time and Relevant Plot
source('stigmaScoresComparisonPlot.R')
# Perform Subgroup Analysis for the various factors
source('subgroupAgeGroups.R')
source('subgroupCaseStatus.R')
source('subgroupChestPain.R')
source('subgroupFever.R')
source('subgroupProvince.R')
source('subgroupTbtype.R')
source('subgroupWeightLoss.R')
# Load Violin Plots for subgroup analysis
source('violinPlotSubgroup2Levels.R')
source('violinPlotProvSubgroup.R')
# 1. Load relevant libraries and date files
source('1_load_data.R')
# 2. Preprocessing
# load data manipulation and processing functions and remove outliers
source('2_MyFunctions.R')
# load pre-processing functions and filtered datasets for subgroup analysis
source('2_processBeforeSubgroup.R')
# 3. Conduct EDA/Bivariate analysis
source('3_edaContinuousVariables.R')
source('3_edaSociodemoVariables.R')
source('3_edaSymptomsVariables.R')
source('3_edaMedicalConditionsVariables.R')
# 4. Run Linear and Logistic Regression
source('baselineHypoTestAndRegModels.R')
# 4. Run Linear and Logistic Regression
source('baselineHypoTestAndRegModels.R')
# 4. Run Linear and Logistic Regression
source('4_baselineHypoTestAndRegModels.R')
source('stigmaScoresOverTimeHypoTest.R')
source('stigmaScoresOverTimeHypoTest.R')
# Shapiro-Wilk test to test for normality in both baseline and follow up cohorts of 621 individuals
# baseline: p-value < 0.01 --> data is likely not normally distributed
shapiro.test(datatb1$stigma_score[!is.na(datatb2$stigma_score)])
# follow-up: p-value < 0.01 --> data is likely not normally distributed
shapiro.test(datatb2$stigma_score[!is.na(datatb2$stigma_score)])
# Since not normally distributed, use wilcoxon to compare the sample of 621 at different time frames
wilcox.test(datatb1$stigma_score[!is.na(datatb2$stigma_score)],datatb2$stigma_score[!is.na(datatb2$stigma_score)] , paired=TRUE)
# 5. Analysis of Stigma Scores Over Time and Relevant Plot
source('5_stigmaScoresOverTimeHypoTest.R')
source('5_stigmaScoresComparisonPlot.R')
source('6_subgroupSmokingStatus.R')
source('6_subgroupSmokingStatus.R')
source('6_subgroupSmokingStatus.R')
source('6_subgroupSmokingStatus.R')
test
source('6_subgroupSmokingStatus.R')
# 1. Load relevant libraries and date files
source('1_load_data.R')
# 2. Preprocessing
# load data manipulation and processing functions and remove outliers
source('2_MyFunctions.R')
# load pre-processing functions and filtered datasets for subgroup analysis
source('2_processBeforeSubgroup.R')
# 3. Conduct EDA/Bivariate analysis
source('3_edaContinuousVariables.R')
source('3_edaSociodemoVariables.R')
source('3_edaSymptomsVariables.R')
source('3_edaMedicalConditionsVariables.R')
# 4. Run Linear and Logistic Regression
source('4_baselineHypoTestAndRegModels.R')
# 5. Analysis of Stigma Scores Over Time and Relevant Plot
source('5_stigmaScoresOverTimeHypoTest.R')
source('5_stigmaScoresComparisonPlot.R')
# 6. Perform Subgroup Analysis for the various factors
source('6_subgroupAgeGroups.R')
source('6_subgroupCaseStatus.R')
source('6_subgroupChestPain.R')
# 1. Load relevant libraries and date files
source('1_load_data.R')
# 2. Preprocessing
# load data manipulation and processing functions and remove outliers
source('2_MyFunctions.R')
# load pre-processing functions and filtered datasets for subgroup analysis
source('2_processBeforeSubgroup.R')
# 3. Conduct EDA/Bivariate analysis
source('3_edaContinuousVariables.R')
source('3_edaSociodemoVariables.R')
source('3_edaSymptomsVariables.R')
source('3_edaMedicalConditionsVariables.R')
# 4. Run Linear and Logistic Regression
source('4_baselineHypoTestAndRegModels.R')
# 5. Analysis of Stigma Scores Over Time and Relevant Plot
source('5_stigmaScoresOverTimeHypoTest.R')
source('5_stigmaScoresComparisonPlot.R')
# 6. Perform Subgroup Analysis for the various factors
source('6_subgroupAgeGroups.R')
source('6_subgroupCaseStatus.R')
source('6_subgroupChestPain.R')
source('6_subgroupCough.R')
# 1. Load relevant libraries and date files
source('1_load_data.R')
# 2. Preprocessing
# load data manipulation and processing functions and remove outliers
source('2_MyFunctions.R')
# load pre-processing functions and filtered datasets for subgroup analysis
source('2_processBeforeSubgroup.R')
# 3. Conduct EDA/Bivariate analysis
source('3_edaContinuousVariables.R')
source('3_edaSociodemoVariables.R')
source('3_edaSymptomsVariables.R')
source('3_edaMedicalConditionsVariables.R')
# 4. Run Linear and Logistic Regression
source('4_baselineHypoTestAndRegModels.R')
# 5. Analysis of Stigma Scores Over Time and Relevant Plot
source('5_stigmaScoresOverTimeHypoTest.R')
source('5_stigmaScoresComparisonPlot.R')
# 6. Perform Subgroup Analysis for the various factors
source('6_subgroupAgeGroups.R')
source('6_subgroupCaseStatus.R')
source('6_subgroupChestPain.R')
source('6_subgroupCough.R')
source('6_subgroupFever.R')
source('6_subgroupNightSweat.R')
source('6_subgroupProvince.R')
source('6_subgroupSmokingStatus.R')
source('6_subgroupTbtype.R')
source('6_subgroupWeightLoss.R')
# 7. Load Violin Plots for subgroup analysis
source('7_violinPlotSubgroup2Levels.R')
source('7_violinPlotProvSubgroup.R')
